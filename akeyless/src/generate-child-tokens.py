#!/usr/bin/env python3

from __future__ import print_function
import argparse
import time, os
import akeyless
from akeyless.rest import ApiException
from pprint import pprint

parser = argparse.ArgumentParser()
parser.add_argument('--uid_token', type=str, required=True)
parser.add_argument('--config_file', type=str, required=True)
args = parser.parse_args()

uid_token = args.uid_token
config_file = args.config_file

# Defining the host is optional and defaults to https://api.akeyless.io
# See configuration.py for a list of all supported configuration parameters.
configuration = akeyless.Configuration(
    host = 'https://api.akeyless.io'
)

# TTL (in minutes) -- hard coded for now
child_ttl_minutes = 180

# split the line at the '=' symbol
def get_pair(line):
    key, sep, value = line.strip().partition('=')
    return key, value

# read our config file, which is basically a key=value per line, into a dict
with open(config_file) as fd:    
    configs = dict(get_pair(line) for line in fd)

short_token = uid_token[-6:]
print(f'using uid_token ending with "{short_token}"...')
          
# auth_method is our key
for auth_method in configs.keys():
    # read the env file into a dict
    env_file = configs[auth_method]
    with open(env_file) as fd:
        envs = dict(get_pair(line) for line in fd)

    short_token = uid_token[-6:]
    print(f'generating new child token using auth method {auth_method}')

    with akeyless.ApiClient() as api_client:
        # Create an instance of the API class
        api_instance = akeyless.V2Api(api_client)
        body = akeyless.UidCreateChildToken(
            auth_method_name=f'{auth_method}', # note a leading / is required
            child_deny_inheritance=True,
            child_deny_rotate=False,
            child_ttl=child_ttl_minutes,
            description=f'{auth_method} child token, auto-generated by token rotation script',
            uid_token=uid_token
        )

        try:
            api_response_child = api_instance.uid_create_child_token(body)
            short_child_token = api_response_child.token[-6:]
            print(f'saving new child token ending with "{short_child_token}" to {env_file}')
            # add or update the AKEYLESS_TOKEN value in the dict of Docker env vars
            envs['AKEYLESS_TOKEN'] = api_response_child.token
            f = open(env_file, 'w')
            for k in envs.keys():
                f.write(f'{k}={envs[k]}\n')
            f.close()

        except ApiException as e:
            print('exception when calling V2Api->uid_create_child_token: %s\n' % e)